layout的作用是ViewGroup用来确定自己和其子元素的位置。

View通过layout()确定自己的位置；
ViewGroup通过layout()确定自己的位置，通过实现onLayout()确定子元素的位置。

父元素->layout()确定自己的位置->layout()会调用onLayout()->onLayout()遍历调用所有子元素的layout()来确定它们的位置
如果子元素是ViewGroup，则重复上面的步骤，这样一层层传递下去就完成了整个View Tree的layout。
onLayout()的实现和具体布局有关，所以View和ViewGroup都没有实现onLayout()方法。
任何具体的ViewGroup都必须合理地实现onLayout()，在此方法中遍历调用所有子元素的layout()来确定它们的位置。

################################################################################################################
View的layout()和onLayout():
/**
 * Assign a size and position to a view and all of its
 * descendants
 *
 * <p>This is the second phase of the layout mechanism.
 * (The first is measuring). In this phase, each parent calls
 * layout on all of its children to position them.
 * This is typically done using the child measurements
 * that were stored in the measure pass().</p>
 *
 * <p>Derived classes should not override this method.
 * Derived classes with children should override
 * onLayout. In that method, they should
 * call layout on each of their children.</p>
 *
 * @param l Left position, relative to parent
 * @param t Top position, relative to parent
 * @param r Right position, relative to parent
 * @param b Bottom position, relative to parent
 */
@SuppressWarnings({"unchecked"})
public void layout(int l, int t, int r, int b) {
    if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {
        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);
        mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    }

    int oldL = mLeft;
    int oldT = mTop;
    int oldB = mBottom;
    int oldR = mRight;

// setFrame设置该View/ViewGroup四个顶点的位置，即初始化mLeft,mTop,mRight,mBottom的值。
// 四个顶点的位置一旦确定，其在父容器中的位置也就确定了。
// 所以说layout方法里首先确定自己（在父容器中）的位置。
    boolean changed = isLayoutModeOptical(mParent) ?
            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);

    if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {
// onLayout方法确定子元素的位置，如果本View是具体的ViewGroup，onLayout必须实现。
        onLayout(changed, l, t, r, b);

        if (shouldDrawRoundScrollbar()) {
            if(mRoundScrollbarRenderer == null) {
                mRoundScrollbarRenderer = new RoundScrollbarRenderer(this);
            }
        } else {
            mRoundScrollbarRenderer = null;
        }

        mPrivateFlags &= ~PFLAG_LAYOUT_REQUIRED;

        ListenerInfo li = mListenerInfo;
        if (li != null && li.mOnLayoutChangeListeners != null) {
            ArrayList<OnLayoutChangeListener> listenersCopy =
                    (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();
            int numListeners = listenersCopy.size();
            for (int i = 0; i < numListeners; ++i) {
                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);
            }
        }
    }

    mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;
    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;
}

/**
 * Called from layout when this view should
 * assign a size and position to each of its children.
 *
 * Derived classes with children should override
 * this method and call layout on each of
 * their children.
 * @param changed This is a new size or position for this view
 * @param left Left position, relative to parent
 * @param top Top position, relative to parent
 * @param right Right position, relative to parent
 * @param bottom Bottom position, relative to parent
 */
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
}

##############################################################################################################
ViewGroup的layout()和onLayout():

@Override
public final void layout(int l, int t, int r, int b) {
    if (!mSuppressLayout && (mTransition == null || !mTransition.isChangingLayout())) {
        if (mTransition != null) {
            mTransition.layoutChange(this);
        }
        super.layout(l, t, r, b);
    } else {
        // record the fact that we noop'd it; request layout when transition finishes
        mLayoutCalledWhileSuppressed = true;
    }
}

@Override
protected abstract void onLayout(boolean changed, int l, int t, int r, int b);
##############################################################################################################

View的测量宽高和最终宽高有什么区别？
获得测量宽高的方法：getMeasuredWidth(),getMeasuredHeight()
获得最终宽高的方法：getWidth(),getHeight()
// View.java
// 返回的刚好就是View的测量宽度
public final int getWidth() {
    return mRight - mLeft;
}
// View.java
// 返回的刚好就是View的测量高度
public final int getHeight() {
    return mBottom - mTop;
}
在View的默认实现中，View的测量宽高和最终宽高是相等的，
区别是View的测量宽高形成于View的measure过程(onMeasure(int widthMeasureSpec, int heightMeasureSpec)方法里给mMeasuredWidth和mMeasuredHeight赋值)，
最终宽高形成于View的layout过程(layout(int l, int t, int r, int b)方法里给mLeft,mTop,mRight,mBottom赋值)。
l = childLeft;
t = childTop;
r = childLeft + getMeasuredWidth();
b = childTop + getMeasuredHeight();

mLeft = l;
mTop = t;
mRight = r;
mBottom = b;

因此mRight - mLeft等于getMeasuredWidth()，mBottom - mTop等于getMeasuredHeight()。

知道这个结论后，很容易改造出View的测量宽高与最终宽高不相等的情况，例如重写layout():
public void layout(int l, int t, int r, int b) {
    super.layout(l, t, r + 100, b + 100);
}
这样的话，View的最终宽高都会比测量宽高大100像素，当前这样做没有实际意义。
